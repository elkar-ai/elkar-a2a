/* tslint:disable */
/* eslint-disable */
/**
 * elkar-app
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DebuggerHistoryResponse,
  StoreA2ADebuggerHistoryInput,
} from '../models/index';
import {
    DebuggerHistoryResponseFromJSON,
    DebuggerHistoryResponseToJSON,
    StoreA2ADebuggerHistoryInputFromJSON,
    StoreA2ADebuggerHistoryInputToJSON,
} from '../models/index';

export interface EpGetDebuggerHistoryRequest {
    taskId?: string;
    url?: string;
}

export interface EpStoreDebuggerHistoryRequest {
    storeA2ADebuggerHistoryInput: StoreA2ADebuggerHistoryInput;
}

/**
 * 
 */
export class DebuggerHistoryApi extends runtime.BaseAPI {

    /**
     * Retrieve debugger history entries
     */
    async epGetDebuggerHistoryRaw(requestParameters: EpGetDebuggerHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DebuggerHistoryResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['taskId'] != null) {
            queryParameters['task_id'] = requestParameters['taskId'];
        }

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/debugger-history`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DebuggerHistoryResponseFromJSON));
    }

    /**
     * Retrieve debugger history entries
     */
    async epGetDebuggerHistory(requestParameters: EpGetDebuggerHistoryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DebuggerHistoryResponse>> {
        const response = await this.epGetDebuggerHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store a debugger history entry
     */
    async epStoreDebuggerHistoryRaw(requestParameters: EpStoreDebuggerHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['storeA2ADebuggerHistoryInput'] == null) {
            throw new runtime.RequiredError(
                'storeA2ADebuggerHistoryInput',
                'Required parameter "storeA2ADebuggerHistoryInput" was null or undefined when calling epStoreDebuggerHistory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/debugger-history`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreA2ADebuggerHistoryInputToJSON(requestParameters['storeA2ADebuggerHistoryInput']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Store a debugger history entry
     */
    async epStoreDebuggerHistory(requestParameters: EpStoreDebuggerHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.epStoreDebuggerHistoryRaw(requestParameters, initOverrides);
    }

}
