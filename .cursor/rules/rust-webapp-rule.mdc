---
description: 
globs: *.rs
alwaysApply: false
---
# Rust Web Application Development Rule

## Project Structure
- Follow modular architecture with domain-driven organization:
  ```
  app/
  ├── src/
  │   ├── main.rs              # App entry point, server setup
  │   ├── router.rs            # Centralized routing
  │   ├── handler/             # HTTP request handlers by domain
  │   ├── service/             # Business logic by domain
  │   ├── models/              # Database models
  │   └── extensions/          # Middleware, extractors, utils
  ├── migrations/              # Database migrations
  └── crates/                  # Workspace member crates
  ```

## Database and ORM
- Use Diesel for type-safe SQL operations with async support
- Implement connection pools with deadpool
- Organize migrations using diesel_migrations
- Apply Row Level Security for data isolation
- Create domain-specific services for database operations
- Use `diesel_async::RunQueryDsl`for executing queries

## Error Handling
- Create custom error type implementing `std::error::Error`
- Define `AppResult<T>` type alias for consistent error handling
- Propagate errors with `?` operator instead of `unwrap()`/`expect()`
- Map errors to appropriate HTTP status codes in handlers

## API and Routing
- Use Axum for routing with modular approach
- Implement extractors for request validation
- Group routes by domain in dedicated modules
- Apply middleware using tower layers
- Use typed path parameters and queries

## Row Level Security
- Enable RLS at database level:
  ```sql
  ALTER TABLE table_name ENABLE ROW LEVEL SECURITY;
  CREATE POLICY policy_name ON table_name 
    USING (tenant_id = current_setting('tenant.id')::uuid);
  ```
- Set tenant context in application:
  ```rust
  // Set tenant ID for current session
  conn.batch_execute(format!("SET tenant.id = '{}'", tenant_id)).await?;
  ```
- Extract tenant ID from request headers
- Create database user roles with different permissions
- Use connection pools aware of tenant context
- inserting tenant_id on table is not required, it is set in the connection pool

## Authentication and Security
- Implement token-based authentication
- Use context extractors for user information
- Apply CORS and security middleware
- Use typed extractors to enforce authentication
- Validate request data before processing

## Async Programming
- Use tokio runtime with proper configuration
- Avoid blocking operations in async context
- Implement proper error handling in async code
- Use connection pools for database access

## Testing and Observability
- Write unit and integration tests for each layer
- Use tracing for structured logging
- Configure Sentry for error tracking
- Implement health checks for monitoring

## Configuration
- Use environment variables with dotenv
- Create type-safe configuration structures
- Validate configuration at startup
- Use secrecy for sensitive configuration 